/** Copyright 2022 Andrew J Bowley

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License. */
package au.com.cybersearch2.node;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;

/**
 * Join table which links nodes to their parents.
 * 
 * <p>
 * For more information about foreign objects, see the <a href="http://ormlite.com/docs/foreign" >online docs</a>
 * </p>
 */
@Entity(name="child_nodes")
public class ParentChild {
    /** Column name in join table for user foreign key */
	public final static String CHILD_ID_FIELD_NAME = "_child_id";
    /** Column name in join table for post foreign key */
	public final static String PARENT_ID_FIELD_NAME = "_parent_id";

	/**
	 * This id is generated by the database and set on the object when it is passed to the create method. An id is
	 * needed in case we need to update or delete this object in the future.
	 */
    @Id @GeneratedValue
	int id;

	/** This is a foreign object which just stores the id from the User object in this table. */
    @OneToOne
    @JoinColumn(name=CHILD_ID_FIELD_NAME, referencedColumnName="_id")
    NodeBean child;

	/** This is a foreign object which just stores the id from the Post object in this table. */
    @OneToOne
    @JoinColumn(name=PARENT_ID_FIELD_NAME, referencedColumnName="_id")
    NodeBean parent;

    /**
     * NodeParent default constructor for ormlite
     */
    ParentChild()
    {
    }
    
    public ParentChild(NodeBean parent, NodeBean child)
    {
    	this.child = child;
    	this.parent = parent;
    }
}
